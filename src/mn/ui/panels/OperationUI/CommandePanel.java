/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mn.ui.panels.OperationUI;
import com.github.lgooddatepicker.optionalusertools.DateChangeListener;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;
import java.awt.GridLayout;
import java.sql.Connection;
import mn.Dao.Access;
import javax.swing.JOptionPane;
import mn.Dao.CustomDataFournisseur;
import mn.Dao.CustomDataOperation;
import mn.model.Fournisseur;
import mn.model.Operation;
import mn.model.OperationFournisseur;
import mn.ui.commons.ModelPanel;

/**
 *
 * @author lars
 */
public class CommandePanel extends ModelPanel {
    CustomDataFournisseur dataFournisseur;
    CustomDataOperation dataOperation;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fournisseur = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        contact = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lieu = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        prixAvecFrais = new javax.swing.JTextField();
        dateHeure = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel6 = new javax.swing.JLabel();
        prixSansFrais = new javax.swing.JTextField();
        observation = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        date = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        md = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Fournisseur");

        jLabel2.setText("Date et Heure");

        jLabel3.setText("Contact");

        jLabel4.setText("Lieu");

        jLabel5.setText("Prix avec frais");

        jLabel6.setText("Prix sans frais");

        jLabel7.setText("Observation");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "R", "L", "R/L" }));

        jLabel9.setText("Type");

        jButton1.setText("Enregistrer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fournisseur)
                    .addComponent(contact)
                    .addComponent(lieu)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(145, 158, Short.MAX_VALUE))
                    .addComponent(prixAvecFrais)
                    .addComponent(prixSansFrais)
                    .addComponent(observation)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(dateHeure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fournisseur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateHeure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prixAvecFrais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prixSansFrais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(observation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(253, Short.MAX_VALUE))
        );

        md.setBackground(new java.awt.Color(255, 255, 255));
        md.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setViewportView(md);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 522, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fournisseurValue=fournisseur.getText();
        String dateHeureValeur=dateHeure.toString();
        Fournisseur fseur=null;
        try {
            fseur=dataFournisseur.fseur(fournisseurValue);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"La ref ne correspond à aucun fournisseur");
        }
        try {
            String contactValeur=contact.getText();
            String lieuValeur=lieu.getText();
            String observationValeur=observation.getText();
            Operation operation=new Operation();
            operation.setContact(contactValeur);
            operation.setDateHeure(dateHeureValeur);
            operation.setFournisseur(fseur.getId());
            operation.setLieu(lieuValeur);
            if(!prixSansFrais.getText().isBlank()){
                Double prixSansFraisValeur=Double.valueOf(prixSansFrais.getText());
                operation.setPrixSansFrais(prixSansFraisValeur);
            }
            if(!prixAvecFrais.getText().isBlank()){
                Double prix=Double.valueOf(prixAvecFrais.getText());
                operation.setPrix(prix);
            }
            operation.setEtat(1);
            operation.setType(type.getSelectedItem().toString());
            operation.setObservation(observationValeur);
            if(operation.getType().equals("R")){
                if(lieuValeur.isBlank()){
                    operation.setLieu(fseur.getRecuperation());
                }
                if(contactValeur.isBlank()){
                    operation.setContact(fseur.getContact());
                }
            }
            Connection con=Access.getConnection();
            if(operation.getType().equals("L")){
                int iref=dataOperation.countMax(fseur.getId(),dateHeure.datePicker.getDateStringOrEmptyString(), con);
                operation.setRef(iref+1);
            }else{
                operation.setRef(fseur.getCode());
            }
            dataOperation.insert(operation, con);
            setList(con);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,"Valeur non pris en charge");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void setList(Connection con) throws Exception{
        String dateofDay=date.toString();
        this.md.removeAll();
        for(OperationFournisseur tmp:this.dataOperation.operationDetails(dateofDay,con)){
            CommandeClient clt=new CommandeClient();
            clt.set(tmp,dataOperation,this.dataOperation.livreurdu(dateofDay, con),this);
            clt.revalidate();
            this.md.add(clt);
            this.md.revalidate();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField contact;
    private com.github.lgooddatepicker.components.DatePicker date;
    private com.github.lgooddatepicker.components.DateTimePicker dateHeure;
    private javax.swing.JTextField fournisseur;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lieu;
    private javax.swing.JPanel md;
    private javax.swing.JTextField observation;
    private javax.swing.JTextField prixAvecFrais;
    private javax.swing.JTextField prixSansFrais;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables

    @Override
    public void start() throws Exception {
        initComponents();
        dataFournisseur=new CustomDataFournisseur();
        dataOperation=new CustomDataOperation();
        date.setDateToToday();
        date.addDateChangeListener(new DateChangeListener() {
            @Override
            public void dateChanged(DateChangeEvent dce) {
                try {
                    Connection con=Access.getConnection();
                    setList(con);
                    con.close();
                    revalidate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        this.md.setLayout(new GridLayout(0,1));
        Connection con=Access.getConnection();
        setList(con);
        con.close();
    }
}
