/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mn.ui.panels;

import com.github.lgooddatepicker.optionalusertools.DateChangeListener;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import mn.Dao.Data;
import mn.model.Livreur;
import mn.model.LivreurCalendrier;
import mn.model.Calendrier;
import mn.ui.commons.ModelPanel;
import mn.ui.commons.TableModel;

/**
 *
 * @author Lars Ratovo
 */
public class CalendrierPanel extends ModelPanel{
    List<LivreurCalendrier> livreurjour;
    Data<Calendrier> calendrierData;
    Data<LivreurCalendrier> livreurCalendrierData;
    /**
     * Creates new form CalendrierPanel
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        tableau1 = new mn.ui.commons.Tableau<>();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableau1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tableau1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private mn.ui.commons.Tableau<LivreurCalendrier> tableau1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void start() throws Exception {
        initComponents();
        Data<Livreur> dataLivreur=new Data<>();
        dataLivreur.init(Livreur.class);
        List<Livreur> listLivreur=dataLivreur.getAll();
        this.calendrierData=new Data();
        this.calendrierData.init(Calendrier.class);
        this.livreurCalendrierData=new Data();
        this.livreurCalendrierData.init(LivreurCalendrier.class);
        this.datePicker1.setDateToToday();
        setDatePickerAndList();
        setList(listLivreur);
        this.datePicker1.addDateChangeListener(new DateChangeListener(){
            @Override
            public void dateChanged(DateChangeEvent dce) {
                LivreurCalendrier tmp=new LivreurCalendrier();
                tmp.setDate(dce.getNewDate().toString());
                try {
                    livreurjour=livreurCalendrierData.findByExample(tmp);
                    setDatePickerAndList();
                    revalidate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        
        });
        this.jList1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(e.getClickCount()==2){
                    int index=jList1.locationToIndex(e.getPoint());
                    Livreur selected=listLivreur.get(index);
                    if(!travaille(selected)){
                       Calendrier c=new Calendrier();
                       c.setLivreur(selected.getId());
                       c.setDate(datePicker1.getDateStringOrEmptyString());
                        try {
                            calendrierData.save(c);
                            JOptionPane.showMessageDialog(null,"Calendrier saved");
                            setDatePickerAndList();
                            revalidate();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        this.revalidate();
    }
    
    private void setDatePickerAndList() throws Exception{
        LivreurCalendrier tmp=new LivreurCalendrier();
        tmp.setDate(this.datePicker1.getDateStringOrEmptyString());
        this.livreurjour=this.livreurCalendrierData.findByExample(tmp);
        TableModel<LivreurCalendrier> customModel=new TableModel<>(livreurjour,LivreurCalendrier.class,livreurCalendrierData);
        this.tableau1.init(LivreurCalendrier.class, livreurCalendrierData, customModel);
    }
    
    private void setList(List<Livreur> listLivreur) throws Exception{
        DefaultListModel listModel=new DefaultListModel();
        listModel.addAll(listLivreur);
        this.jList1.setModel(listModel);
        this.jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    private boolean travaille(Livreur r){
        for(LivreurCalendrier tmp:livreurjour){
            if(r.getId().equals(tmp.getId())){
                return true;
            }
        }
        return false;
    }
}
